// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AtmosContext))]
    partial class AtmosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ReadingAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<double?>("DewPointFiveMinuteRollingAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("DewPointMax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DewPointMaxTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DewPointMin")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DewPointMinTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DewPointOneMinuteAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double?>("HumidityFiveMinuteRollingAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("HumidityMax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("HumidityMaxTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("HumidityMin")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("HumidityMinTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("HumidityOneMinuteAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("TemperatureFiveMinuteRollingAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureMax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TemperatureMaxTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TemperatureMin")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TemperatureMinTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("TemperatureOneMinuteAverage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("ReadingAggregates");
                });
#pragma warning restore 612, 618
        }
    }
}
